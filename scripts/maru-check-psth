#!/usr/bin/env python

import sys
import numpy as np
import tables as tbl
from matplotlib import rc, use
import cPickle as pk
use('pdf')
from matplotlib.backends.backend_pdf import PdfPages
import pylab as pl
from maru.utils import parse_opts2


# ------------------------------------------------------------
def load_db(files, db, verbose=1):
    n = len(files)
    initialized = False

    for i_f, f in enumerate(files):
        if verbose > 0:
            print 'At (%d/%d): %s' % (i_f + 1, n, f)
        #dat = pk.load(open(f))
        h5 = tbl.openFile(f)
        t_start = h5.root.meta.tmin.read()
        spktimg = h5.root.spkt_img.read()
        ntrials = h5.root.meta.ntrials_img.read()
        n_img, n_elec, _, _ = spktimg.shape
        try:
            iids = h5.root.meta.idx2iid.read()
        except:
            iids = pk.loads(h5.root.meta.idx2iid_pk.read())
            iids = [iids[e] for e in sorted(iids)]
        n_bins = h5.root.meta.nbins.read()

        if not initialized:
            n_bins0 = n_bins
            n_elec0 = n_elec
            t_start0 = t_start
            initialized = True
        else:
            assert n_bins0 == n_bins
            assert n_elec0 == n_elec
            assert t_start0 == t_start

        for ii in xrange(n_img):
            img = iids[ii]
            ntr = ntrials[ii, :]
            assert all(ntr == ntr[0])
            ntr = ntr[0]
            trials = spktimg[ii, :, :ntr]
            trials = np.unpackbits(trials, axis=2)

            if img not in db:
                db[img] = {}
                db[img]['cnt'] = 0
                #db[img]['mat'] = np.zeros((n_elec, n_bins)).astype('int')

            db[img]['cnt'] += ntr
            db[img]['mat'] = trials.sum(axis=1)[:, :n_bins]
            assert db[img]['mat'].shape == (n_elec, n_bins)

    return t_start0


# ------------------------------------------------------------
def init():
    rc('font', **{
        'family': 'serif',
        'serif': ['Times New Roman']})
    rc('figure', **{
        'figsize': '8,8.5',
        'subplot.left': '0.03',
        'subplot.right': '0.97',
        'subplot.bottom': '0.05',
        'subplot.top': '0.95',
        'subplot.wspace': '0.25',
        'subplot.hspace': '0.3',
    })


def SNR(wav0, chunk=15):
    wav = wav0[1:-1]

    ibs = range(0, len(wav), chunk)
    ies = ibs[1:] + [len(wav)]

    S = np.mean(wav)
    #D = np.max(wav) - np.min(wav)
    D = np.std(wav, ddof=1)
    Ns = []
    for ib, ie in zip(ibs, ies):
        if ie - ib < 2:
            continue
        Ns.append(np.std(wav[ib:ie], ddof=1))
    N = np.mean(Ns)

    return S / N, D / N


# ------------------------------------------------------------
def plot_all(db, pp, n_bins=None, t_begin=-100000, log='log.tmp',
        log2=None, verbose=0, xl=None):
    keys = db.keys()
    k0 = keys[0]
    n_elec, n_bins0 = db[k0]['mat'].shape
    if n_bins is None:
        n_bins = n_bins0

    n = len(keys)
    M = np.zeros((n_elec, n_bins))   # averaged across the images
    B = np.zeros((n_elec, n_bins))   # best image
    C = np.zeros(n_elec)
    L = {}
    t = np.array(range(t_begin / 1000, t_begin / 1000 + n_bins)) + 0.5
    if xl is None:
        xl = (t[0] - 0.5, t[-1] + 0.5)

    for img in keys:
        if verbose > 1:
            print img
            print db[img]['cnt']
        # converting to Spkies/s
        # DBG print db[img]['mat']
        # DBG print db[img]['cnt']
        # DBG print img
        T = db[img]['mat'] / float(db[img]['cnt']) * 1000.
        M += T

        c = T.mean(axis=1)
        ii = np.nonzero(c > C)[0]   # all channels that have bigger responses
        C[ii] = c[ii]
        B[ii, :] = T[ii, :]
        for ch in ii:
            L[int(ch)] = img

    M /= float(n)

    # -- for each chaneel
    snrs = []
    dnrs = []
    if log2 is None:
        log2 = log + '.ch.log'
    fp = open(log2, 'wt')
    print >>fp, '# 1-based ch, SNR, DNR'
    for ch in xrange(n_elec):
        if verbose > 0:
            print '-->', ch
        pl.figure(figsize=(18, 10))
        N = M[ch]
        snr, dnr = SNR(N)

        pl.plot(t, N)
        pl.xlim(xl)
        pl.title('Firing rate averaged across all images '
                '(Ch %d, SNR = %f, DNR = %f)' % (ch + 1, snr, dnr))
        print >>fp, (ch + 1), snr, dnr

        pp.savefig()
        pl.close()
        snrs.append(snr)
        dnrs.append(dnr)
    fp.close()
    snrs = np.array(snrs)
    dnrs = np.array(dnrs)
    snrm = np.mean(snrs[np.isfinite(snrs)])
    dnrm = np.mean(dnrs[np.isfinite(dnrs)])

    # -- summary
    pl.figure(figsize=(18, 10))
    # averaged PSTH for all images and channels
    pl.subplot(221)
    pl.plot(t, M.mean(axis=0))
    pl.xlim(xl)
    pl.title('Firing rate averaged across all images and channels')

    # averaged PSTH for all images (different color for each ch)
    pl.subplot(222)
    pl.plot(t, M.T)
    pl.xlim(xl)
    pl.title('Firing rate averaged across all images '
            '(mean SNR = %f, mean DNR = %f)' % (snrm, dnrm))

    # PSTH for best images averaged for all chs
    pl.subplot(223)
    pl.plot(t, B.mean(axis=0))
    pl.xlim(xl)
    pl.title('Firing rate of best images averaged across all channels')

    # PSTH for best images for each ch
    d = 10
    t2 = np.zeros(int(np.ceil(n_bins / float(d))))
    B2 = np.zeros((n_elec, int(np.ceil(n_bins / float(d)))))
    for i, s in enumerate(range(0, n_bins, d)):
        e = s + d
        t2[i] = np.mean(t[s:e])
        B2[:, i] = np.mean(B[:, s:e], axis=1)

    pl.subplot(224)
    # ignore the last time bin
    pl.plot(t2[: -1], B2[:, :-1].T)
    pl.xlim(xl)
    pl.title('Firing rate of best images')

    fp = open(log, 'wt')
    print >>fp, '# 1-based ch, preferred stim'
    for ch in sorted(L.keys()):
        print >>fp, (ch + 1), L[ch]
    fp.close()

    pp.savefig()
    pl.close()


# ------------------------------------------------------------

def main():
    if len(sys.argv) < 3:
        print 'maru-check-psth <out prefix> <in1.psf.pk> [in2.psf.pk] ...'
        print
        print 'Options:'
        print '  --n_bins=#       Number of 1-ms bins'
        return

    # -- parse options and arguments
    args, opts = parse_opts2(sys.argv[1:])

    of = args[0]
    files = args[1:]
    print 'OF =', of
    print 'FILES =', files

    n_bins = None
    if 'n_bins' in opts:
        n_bins = int(opts['n_bins'])
        print '  * n_bins =', n_bins

    db = {}
    t_begin = load_db(files, db)

    # -- plot
    init()
    fpic = of + '.pdf'
    flog = of + '.bstim.log'
    flog2 = of + '.snr.log'

    pp = PdfPages(fpic)
    plot_all(db, pp, log=flog, log2=flog2, t_begin=t_begin)
    pp.close()

    print 'Done.'


if __name__ == '__main__':
    main()
